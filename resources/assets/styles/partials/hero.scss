/**
 * Hero
 */

/**
 * Animations
 */
 @keyframes slide-in-right {
	from {
		transform: translateX(-100%);
	}
	to {
		transform: translateX(0);
	}
}

@keyframes slide-in-left {
	from {
		transform: translateX(100%);
	}
	to {
		transform: translateX(0);
	}
}

@keyframes fade-in-right {
	from {
		transform: translateX(-150%);
		opacity: 0;
	}
	to {
		transform: translateX(0);
		opacity: 1;
	}
}

@keyframes fade-in-left {
	from {
		transform: translateX(150%);
		opacity: 0;
	}
	to {
		transform: translateX(0);
		opacity: 1;
	}
}

/**
 * @mixin slide-in
 *
 * @params:
 *   $direction: [ right | left]
 *     The direction of the animation's line of action
 *
 * @description:
 *   Translates the element by its size in the direction specified
 */
@mixin slide-in($direction) {
	// handle direction
	@if right == $direction {
		animation-name: slide-in-right;
	} @else if left == $direction {
		animation-name: slide-in-left;
	} @else { // default
		@error "Unknown direction #{$direction}";
	}

	// animation
	animation-delay: 0.1s;
	animation-duration: 1.5s;
	animation-fill-mode: forwards;
}

/**
 * @mixin fade-in
 *
 * @params:
 *   $direction: [ right | left]
 *     The direction of the animation's line of action
 *
 * @description:
 *   Translates the element by its size in the direction specified, while
 *   also transitioning the element from 0 to 1 opacity.
 */
@mixin fade-in($direction) {
	// handle direction
	@if right == $direction {
		animation-name: fade-in-right;
	} @else if left == $direction {
		animation-name: fade-in-left;
	} @else { // default
		@error "Unknown direction #{$direction}";
	}

	// animation
	animation-delay: 0.25s;
	animation-duration: 2s;
	animation-fill-mode: forwards;
	animation-timing-function: ease-out;
}

/**
 * Style
 */
.hero {
	// display
	display: grid;
	grid-template: "." 5vh
				   "brand" min-content
				   "shim" minmax(10vh, auto)
				   "feature" min-content
				   "form" minmax(20vh, min-content)
				   / 100%;

	//-- override global decorator in this context
	%surface {
		// surface
		background-color: rgba(var(--dark-primary-rgb), 0.75);
		box-shadow: 0 0 20px 0px black;
	}

	.hero__brand-grid {
		// position
		grid-area: brand;
		width: 100%;

		// display
		display: grid;
		grid: ". brand . ." min-content
			  / minmax(10%, 100px) minmax(auto, 800px) minmax(5%, 50px) minmax(5%, auto);

		.hero__brand-surface {
			// position
			grid-row: 1;
			grid-column: 1 / span 3;

			// surface
			@extend %surface--left;

			// animation
			@include slide-in(right);
		}

		.hero__brand-image {
			// position
			grid-area: brand;
			align-content: center;
			width: 100%;
			padding: 5% 0;

			// animation
			@include fade-in(right);
		}
	}

	.hero__feature-grid {
		// position
		grid-area: feature;
		width: 100%;

		// display
		display: grid;
		grid: ". . feature ." min-content
			  / minmax(5%, auto) minmax(5%, 40px) minmax(auto, 700px) 10%;

		// content
		color: white;

		.hero__feature-surface {
			// position
			grid-column: 2 / span 3;
			grid-row: 1;

			// surface
			@extend %surface--right;

			// animation
			@include slide-in(left);
		}

		.hero__feature {
			// position
			z-index: 1;
			grid-area: feature;

			// animation
			@include fade-in(left);

			h2 {
				// position
				margin: 0.5em 0;

				// content
				font-size: 56px;
				text-shadow: 1px 1px 4px black;
			}

			p {
				// position
				margin: 1em 0;

				// content
				font-size: 19px;
			}

			// media query
			@include media("<medium") {
				h2 {
					// text
					font-size: 38px;
				}
				p {
					// text
					font-size: 16px;
				}
			}
		}
	}

	.hero__background {
		// position
		position: fixed;
		top: 0;
		z-index: -10;
		width: 100%;
		height: 100vh;

		// surface
		background-size: cover;
		background-position: center;
	}

	.contact-form {
		// position
		grid-area: form;
		justify-self: center;
		align-content: start;
		width: 60%;
		max-width: 600px;
		max-height: 100px;
		margin: auto 0;
	}
}
