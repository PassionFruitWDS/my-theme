/**
 * Contact Form
 */

/**
 * Animations
 */
@keyframes fade--down {
	from {
		// visibility
		visibility: visible;

		// surface
		background-position: 0 100%;
		box-shadow: none;
		border-width: 0;
	} to {
		// visibility
		visibility: visible;

		// surface
		background-position: 0 0;
	}
}

@keyframes fade--in {
	from {
		// visibility
		opacity: 0;
	} to {
		// visibility
		opacity: 1;
	}
}

/**
 * @mixin: fade
 *
 * @params:
 *   $direction: [ down | in ]
 *     Direction of fade
 *   $rgb: [ <color-triplet>: 255 255 255 ]
 *     Background color (no effect when $direction = in)
 *   $alpha: [ <double>: 1 (0 <= val <= 1) ]
 *     Final background opacity (no effect when $direction = in)
 *   $duration: [ <time>: 1s ]
 *     Animation-duration
 *   $delay: [ <time>: 0s ]
 *     Animation-delay
 *
 * @description:
 *   Smoothly fades an element's background color in the specified direction.
 *   In the case of `$direction = in` the element's contents and background fade
 *   in place.
 */
@mixin fade($direction, $rgb: 255 255 255, $alpha: 1, $duration: 1s, $delay: 0s) {
	// direction handling
	@if down == $direction {
		// visibility
		visibility: hidden;

		// surface
		$rgba: rgba($rgb, $alpha);
		background: linear-gradient($rgba 0%,
			$rgba 25%,
			rgba($rgb, 0) 75%);
		background-size: 100% 400%;

		// animation
		animation-name: fade--down;

	} @else if in == $direction {
		// visibility
		opacity: 0;

		// animation
		animation-name: fade--in;

	} @else { // default
		@error "Unknown direction #{$direction}";
	}

	// animation
	animation-fill-mode: forwards;
	animation-delay: $delay;
	animation-duration: $duration;
	animation-timing-function: ease-in;
}

/**
 * Style
 */
.contact-form {
	// display
	display: grid;
	grid: "main main" min-content
		/ 1fr 1fr;
	grid-auto-flow: row;
	grid-gap: 20px 40px;

	// animation
	transition: max-height 1.5s ease-in;

	// font
	font-size: 16px;

	&.contact-form--is-active {
		// position
		max-height: 1000px; // hack that smooths expansion of the form on desktop/tablet

		.contact-form__main-wrapper{
			.contact-form__field {
				// position
				margin-right: 40px;
			}
		}

		.form-field--required::after {
			content: "*";
			color: red;
			position: absolute;
			top: 10px;
			right: 10px;
			font-size: 26px;
		}
	}

	@include media("<=small") {
		position: fixed;
		grid-gap: 3vh 3%;

		&.contact-form--is-active {
			@media (orientation: landscape) {
				align-content: initial;
			}

			top: 0;
			width: 100%;
			height: 100vh;
			overflow-y: scroll;
			background-image: linear-gradient(0.125turn, var(--primary-accent-color), white, var(--secondary-accent-color));
			align-content: center;

			.contact-form__main-wrapper{
				.contact-form__field {
					// position
					margin-right: 3%;
				}
			}
		}

		&:not(.contact-form--is-active) {
			width: 100%;
			bottom:0;

			.contact-form__main-wrapper {
				.contact-form__field {
					border-radius: 0;
					border-left-style: none;
					border-right-style: none;
				}
			}
		}
	}

	.contact-form__main-wrapper {
		// position
		position: relative;
		grid-area: main;

		// display
		display: inline-flex;

		.contact-form__field {
			// position
			justify-self: stretch;
		}
	}

	.contact-form__field {
		// position
		width: 100%;
		justify-self: center;
		box-sizing: border-box;

		border-color: var(--light-primary-color);
		border-width: 2px;
		border-style: outset;

		&--in-focus {
			transform: translateY(-2px);
			box-shadow: 0 0 20px 0 white;
		}

		&.contact-form__field--wide {
			// position
			grid-column: 1 / span 2;
			grid-row: auto;
		}

		&.contact-form__field--animated {
			// animation
			@include fade(down, var(--dark-primary-rgb), 0.95, 1s, 0.25s);

			*:not(label) {
				// animation
				@include fade(in, 0, 0, 1s, 0.5s);
			}
		}
	}

	.contact-form__button {
		// position
		width: min-content;
		justify-self: right;
		align-self: center;
		height: 100%;
		padding: 0.8em 1em;

		// surface
		@extend %surface;

		// content
		font-size: 130%;
		font-family: "Bronova Bold";
		font-weight: bold;
		color: var(--light-secondary-color);

		&:enabled {
			// surface
			border-color: rgba(var(--light-primary-rgb), 0.7);
			border-radius: 20px;
			border-width: 2px;
			border-style: outset;
			cursor: pointer;

			&:hover, &:focus {
				// surface
				box-shadow: 0 0 20px 0 white;
				transform: translateY(-2px);
			}
		}

		&:disabled {
			// position
			position: absolute;
			padding: 0.8em 0;
			right: 1em;

			// surface
			background-color: rgba(var(--dark-primary-rgb), 0);
			box-shadow: none;
			border-width: 0;
		}
	}
}
